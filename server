const WebSocket = require('ws');
const express = require('express');

const app = express();
const server = require('http').createServer(app);
const wss = new WebSocket.Server({ server });

let gameState = {};
let players = [];
let currentPlayer = 0;

const initializeGameState = () => {
    gameState = {
        grid: Array(5).fill(null).map(() => Array(5).fill(null)),
        players: [
            { id: 'A', characters: ['P1', 'H1', 'H2', 'P2', 'P3'] },
            { id: 'B', characters: ['P1', 'H1', 'H2', 'P2', 'P3'] },
        ],
        turn: 'A'
    };

    gameState.grid[0] = gameState.players[0].characters.map(char => A-${char});
    gameState.grid[4] = gameState.players[1].characters.map(char => B-${char});
};

const broadcastGameState = () => {
    players.forEach(ws => {
        ws.send(JSON.stringify({ type: 'game_update', state: gameState }));
    });
};

const handleMove = (playerId, move) => {
    const [char, direction] = move.split(':');
    const playerIndex = gameState.players.findIndex(p => p.id === playerId);
    const playerRow = playerId === 'A' ? 0 : 4;

    for (let i = 0; i < 5; i++) {
        for (let j = 0; j < 5; j++) {
            if (gameState.grid[i][j] === ${playerId}-${char}) {
                gameState.grid[i][j] = null;
                if (direction === 'L') j--;
                else if (direction === 'R') j++;
                else if (direction === 'F') playerId === 'A' ? i++ : i--;
                else if (direction === 'B') playerId === 'A' ? i-- : i++;
                
                // Handle capturing
                if (gameState.grid[i] && gameState.grid[i][j] && !gameState.grid[i][j].startsWith(playerId)) {
                    gameState.grid[i][j] = ${playerId}-${char};
                } else {
                    gameState.grid[i][j] = ${playerId}-${char};
                }
                
                gameState.turn = gameState.turn === 'A' ? 'B' : 'A';
                return;
            }
        }
    }
};

wss.on('connection', (ws) => {
    if (players.length < 2) {
        players.push(ws);
        const playerId = players.length === 1 ? 'A' : 'B';
        ws.send(JSON.stringify({ type: 'player_id', id: playerId }));
        
        if (players.length === 2) {
            initializeGameState();
            broadcastGameState();
        }
    } else {
        ws.send(JSON.stringify({ type: 'full' }));
        ws.close();
    }

    ws.on('message', (message) => {
        const data = JSON.parse(message);
        
        if (data.type === 'move' && data.playerId === gameState.turn) {
            handleMove(data.playerId, data.move);
            broadcastGameState();
        }
    });

    ws.on('close', () => {
        players = players.filter(p => p !== ws);
        if (players.length === 0) {
            initializeGameState();
        }
    });
});

app.use(express.static('public'));

server.listen(8080, () => {
    console.log('Server is running on http://localhost:8080');
});
